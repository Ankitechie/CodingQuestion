#Write a function that returns the number of vowels in a given string.
#Palindrom
#Anargam of each other
#Reverse a string
#Write a program to find the longest substring without repeating characters.
#count of each character and max count of character in a string
#Reverse words in a sentence Input: "Data Engineering Interview" → Output: "Interview Engineering Data"
#Find all permutations of a string (optional: limit output size) Input: "abc" → Output: ["abc", "acb", "bac", "bca", "cab", "cba"]
#Find all duplicate characters in a string Input: "engineering" → Output: {'e': 2, 'n': 3, 'g': 2, 'i': 2}
#Extract Domain from Email Given "user@example.com", extract "example.com"
#Clean and normalize a string (remove special chars, lowercase, trim) Input: " Hello!!  Data  Engineer *** " → Output: "hello data engineer"

#Parse a log line to extract fields Input: "INFO 2023-09-03 - user_id=456 action=login status=success" Output: user_id: 456, action: login, status: success
#Count word frequency in a string (Word Count) Input: "this is a test this is only a test" → Output: {'this': 2, ...}
#Check if one string is rotation of another Input: "abcd", "cdab" → Output: True
#Find the first non-repeating character Input: "aabbcdde" → Output: 'c'
#Convert a string to an integer (without using int()) Input: "123" → Output: 123
#Validate email format using regex or logic  Input: "user.name@example.co" → Output: True
#Parse a messy CSV line with quotes and commas Input: '"1","John, Doe","New York",23' → Output: ['1', 'John, Doe', 'New York', '23']
#Compress a string using run-length encoding Input: "aaabbccc" → Output: "a3b2c3"
#Decompress a run-length encoded string Input: "a3b2c3" → Output: "aaabbccc"


*********************************** Write a function that returns the number of vowels in a given string. ***********************

def test_string(input):
    test=input
    vow='aeiou'
    l=[]
    for i in test:
        if i in vow:
            l.append(i)
    return l
test_string('ankit')

*************************************** Check String is Palindrom **********************************************
a='Madam'
b= a.lower()

print(b)

if b==b[::-1]:
    print("String is Palindrome")

************************************** Anagram of Each other **************************************************

a = 'banana'
b = 'nabana'

# Count characters in string a
adict = {} # creating dictionaries
for char in a:
    adict[char] = adict.get(char, 0) + 1

# Count characters in string b
bdict = {}
for char in b:
    bdict[char] = bdict.get(char, 0) + 1

# Compare the two dictionaries
if adict == bdict:
    print('Strings are anagrams of each other')
else:
    print('Strings are NOT anagrams')


***************************** Reverse a string **************************************
test='abca'
reverse=''
for i in range(len(test)-1,-1,-1):
    print(test[i])
    reverse+= test[i]

print(reverse)

if test==reverse:
    print("palindrom")
else:
    print("no palindrome")

***************************Write a program to find the longest substring without repeating characters *****************

test='abca'
op: 'abc'
a=''
for i in test:
    if i in a:
        break
    else:
        a=a+(i) # use list and we can use a.append() or use set and use .add()
print(a,len(a))

**************************** count of each character and max count of character in a string ***************************************
a = 'hello world'
a = a.replace(" ", "")

char_count = {}

# Count frequency of each character
for i in a:
    char_count[i] = char_count.get(i, 0) + 1

#count of each character
print(char_count)
# Find the maximum frequency
max_freq = 0
for value in char_count.values():
    if value > max_freq:
        max_freq = value

# Find character(s) with that max frequency
for key, value in char_count.items():
    if value == max_freq:
        print(f"Character with max frequency: '{key}' -> {value} times")


